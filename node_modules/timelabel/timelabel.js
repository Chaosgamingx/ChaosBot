'use strict'

function parse (value, string, type) {
  var output
  var input
  var check
  var ivl
  var int
  var rem
  if (string) {
    check = parseInt(value, 10)
    if (isNaN(check)) {
      input = 'error'
    } else {
      input = check
    }
  } else {
    input = value
  }
  if (typeof input === 'number') {
    if (input < 1250) {
      output = input + ' ms'
    } else if (input < 60000) {
      output = Math.round(input / 1000) + ' seconds'
    } else if (input < 3600000) {
      ivl = 60000 // minute
      if (type) {
        int = Math.floor(input / ivl)
        rem = input - (int * ivl)
        output = int + 'm ' + Math.round(rem / 1000) + 's'
      } else {
        if (Math.round(input / ivl) === 1) {
          output = Math.round(input / ivl) + ' minute'
        } else {
          output = Math.round(input / ivl) + ' minutes'
        }
      }
    } else if (input < 86400000) {
      ivl = (60000 * 60) // hour
      if (type) {
        int = Math.floor(input / ivl)
        rem = input - (int * ivl)
        output = int + 'h ' + Math.round(rem / 60000) + 'm'
      } else {
        if (Math.round(input / ivl) === 1) {
          output = Math.round(input / ivl) + ' hour'
        } else {
          output = Math.round(input / ivl) + ' hours'
        }
      }
    } else {
      ivl = 86400000 // day
      if (type) {
        int = Math.floor(input / ivl)
        rem = input - (int * ivl)
        output = int + 'd ' + Math.round(rem / (60000 * 60)) + 'h'
      } else {
        if (Math.round(input / ivl) === 1) {
          output = Math.round(input / ivl) + ' day'
        } else {
          output = Math.round(input / ivl) + ' days'
        }
      }
    }
  } else {
    output = 'error'
  }
  return output
}

module.exports = function (ms, type) {
  var label
  if (!ms) {
    label = parse(0, false, type)
  } else {
    if (typeof ms === 'number') {
      label = parse(ms, false, type)
    } else if (typeof ms === 'string') {
      label = parse(ms, true, type)
    } else {
      label = 'error'
    }
  }
  return label
}

"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;const genius_lyrics_1=require("genius-lyrics");let client;function init(apiKey,force){return client||force||(client=new genius_lyrics_1.Client(apiKey)),{search:search,client:client}}function search(query){return new Promise((resolve,reject)=>{if("string"!=typeof query)return reject(new TypeError(`Expected search query to be a string, received "${typeof query}"!`));client.songs.search(query).then(songs=>__awaiter(this,void 0,void 0,(function*(){const data={title:songs[0].title,id:songs[0].id,thumbnail:songs[0].thumbnail,image:songs[0].image,url:songs[0].url,artist:{name:songs[0].artist.name,id:songs[0].artist.id,url:songs[0].artist.url,image:songs[0].artist.image},lyrics:yield songs[0].lyrics(!1)};resolve(data)}))).catch(()=>{resolve(null)})})}exports.init=init;